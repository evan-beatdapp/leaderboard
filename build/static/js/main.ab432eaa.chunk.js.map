{"version":3,"sources":["component/Countdown.js","component/Table.js","component/Leaderboard.js","component/Prizes.js","component/App.js","serviceWorker.js","index.js"],"names":["Leaderboard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","style","fontWeight","index_es","date","React","Component","columns","name","selector","sortable","Table","index_cjs_default","data","points","axios","get","response","setState","console","log","align","component_Table","Countdown_Leaderboard","Prizes","href","App","className","target","rel","Leaderboard_Leaderboard","Prizes_Prizes","Boolean","window","location","hostname","match","ReactDOM","render","src_component_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAGqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,GAFIP,wEAMjB,OACEQ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,MAAO,CAAEC,WAAY,SAA5B,qBACAJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWC,KAAM,sCAVgBC,IAAMC,4BCCzCC,EAAU,CACd,CACEC,KAAM,WACNC,SAAU,YAEZ,CACED,KAAM,SACNC,SAAU,SACVC,UAAU,GAEZ,CACEF,KAAM,QACNC,SAAU,QACVC,UAAU,GAEZ,CACEF,KAAM,eACNC,SAAU,eACVC,UAAU,IAeCC,mLATX,OACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAWQ,QAASA,EAASM,KAAMpB,KAAKJ,MAAMwB,eALlCP,aCnBClB,4BACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXiB,OAAQ,IAHOxB,iNAQMyB,IAAMC,IAC3B,6EADIC,kBAGAxB,KAAKyB,SAAS,CAAED,SAAUA,uIAKhC,OADAE,QAAQC,IAAI3B,KAAKI,MAAMoB,UAChBxB,KAAKI,MAAMoB,SAChBnB,EAAAC,EAAAC,cAAA,OAAKqB,MAAM,UACTvB,EAAAC,EAAAC,cAACsB,EAAD,CAAOT,KAAMpB,KAAKI,MAAMoB,SAASJ,OACjCf,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACuB,EAAD,OAGFzB,EAAAC,EAAAC,cAAA,mBAxBmCK,IAAMC,YCL1BkB,cACnB,SAAAA,EAAYnC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,IACjBlC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiC,GAAA5B,KAAAH,KAAMJ,KACDQ,MAAQ,GAFIP,wEAKjB,OACEQ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,KAAGyB,KAAK,2EAAR,mCAGA3B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGyB,KAAK,oJAAR,kCAb4BpB,IAAMC,WCyB3BoB,2LApBX,OACE5B,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,OACb7B,EAAAC,EAAAC,cAAA,UAAQ2B,UAAU,cAChB7B,EAAAC,EAAAC,cAAA,2NACAF,EAAAC,EAAAC,cAAA,KACE2B,UAAU,WACVF,KAAK,qCACLG,OAAO,SACPC,IAAI,uBAJN,kBASF/B,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAC+B,EAAD,cAhBUzB,cCOE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ab432eaa.chunk.js","sourcesContent":["import React from \"react\";\nimport Countdown from \"react-countdown-now\";\n\nexport default class Leaderboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n  render() {\n    return (\n      <div>\n        <label style={{ fontWeight: \"bold\" }}>Contest ends in: </label>\n        <Countdown date={\"Sat, 19 Jan 2019 23:59:59\"} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport DataTable from \"react-data-table-component\";\n\n// const data = [{ title: 'Conan the Barbarian', year: '1982' }];\nconst columns = [\n  {\n    name: \"Username\",\n    selector: \"username\"\n  },\n  {\n    name: \"Points\",\n    selector: \"points\",\n    sortable: true\n  },\n  {\n    name: \"Likes\",\n    selector: \"likes\",\n    sortable: true\n  },\n  {\n    name: \"Users Tagged\",\n    selector: \"users_tagged\",\n    sortable: true\n  }\n];\n\nclass Table extends Component {\n  render() {\n    return (\n      <div>\n        <h2>Leaderboard</h2>\n        <DataTable columns={columns} data={this.props.data} />\n      </div>\n    );\n  }\n}\n\nexport default Table;\n","import React from \"react\";\nimport axios from \"axios\";\nimport Countdown from \"./Countdown\";\nimport Table from \"./Table\";\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\nimport \"../../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css\";\n\nexport default class Leaderboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      points: []\n    };\n  }\n\n  async componentDidMount() {\n    const response = await axios.get(\n      \"http://secure-anchorage-54009.herokuapp.com/api/leaderboard\"\n    );\n    await this.setState({ response: response });\n  }\n\n  render() {\n    console.log(this.state.response);\n    return this.state.response ? (\n      <div align=\"center\">\n        <Table data={this.state.response.data} />\n        <br />\n        <Countdown />\n      </div>\n    ) : (\n      <div />\n    );\n  }\n}\n","import React from \"react\";\n\nexport default class Prizes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div>\n        <h3>Prizes:</h3>\n        <a href=\"https://www.playstation.com/en-us/explore/playstationnetwork/psn-cards/\">\n          PLAYSTATION¬ÆSTORE Cash Cards\n        </a>\n        <br />\n        <a href=\"https://www.microsoft.com/en-ca/p/xbox-gift-card-digital-code/CFQ7TTC0K56J/0003?icid=XboxCat-Nav_5-GiftCard-081018&activetab=pivot%3aoverviewtab\">\n          Xbox Digital Gift Card\n        </a>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Leaderboard from \"./Leaderboard\";\nimport Prizes from \"./Prizes\";\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h3>üçÄüÜÇüÜÑüÖøüÖøüÖæüÜÅüÜÉüÖ¥üÜÅ üÖ≤üÖæüÖΩüÜÉüÖ¥üÜÇüÜÉ</h3>\n          <a\n            className=\"App-link\"\n            href=\"https://instagram.com/forfortsakes\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            @forfortsakes\n          </a>\n        </header>\n        <Leaderboard />\n        <Prizes />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}